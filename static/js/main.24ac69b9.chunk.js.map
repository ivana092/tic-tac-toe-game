{"version":3,"sources":["component/Square.js","component/PlayerGrid.js","component/ResetButton.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","type","size","className","onChange","handleClick","id","square","gridId","value","autoComplete","style","backgroundColor","color","PlayerGrid","squares","map","ResetButton","onClick","handleBtnClick","returnArr","Array","fill","_","idx","marked","App","setState","currentSelectionMarked","msg","playerWon","event","newVal","target","toUpperCase","boxSel","Number","prevVal","state","includes","this","marginBottom","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24ac69b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PlayerGrid.css';\r\n\r\nexport const Square = (props) => (\r\n    <input type=\"text\" size=\"1\"\r\n        className=\"input-field\"\r\n        onChange={props.handleClick} id={props.square.gridId}\r\n        value={props.square.value}\r\n        autoComplete=\"off\"\r\n        style={{backgroundColor:props.square.color}}\r\n    ></input>\r\n);","import React from 'react';\r\nimport './PlayerGrid.css';\r\nimport { Square } from './Square.js';\r\nexport const PlayerGrid = (props) => (\r\n    <div className=\"player-grid\">\r\n        {\r\n            props.squares.map(square => (\r\n                <Square key={square.gridId} square={square} handleClick={props.handleClick}>\r\n                </Square>\r\n            ))\r\n        }\r\n        {/*<input key={square.gridId} type=\"text\" size=\"1\" \r\n                className=\"input-field\"\r\n                onChange={props.handleClick} id={square.gridId}\r\n        value={square.value}\r\n    ></input>*/}       \t\t  \r\n    </div>\r\n);","import React from 'react';\r\nimport './ResetButton.css';\r\n\r\nexport const ResetButton = (props) => (\r\n    <button className=\"reset-btn\" type=\"reset\" \r\n    onClick={props.handleBtnClick}>Play again!</button>\r\n)","import './App.css';\nimport React, { Component } from 'react';\nimport { PlayerGrid } from './component/PlayerGrid.js';\nimport { ResetButton } from './component/ResetButton.js';\n\nfunction returnArr() {\n  const arr = Array(8 - 0 + 1).fill().map((_, idx) => {\n    let index = 0 + idx;\n    return {\n      gridId: index,\n      value: '',\n      marked: false,\n      color: 'peachpuff' //cadetblue, lightCoral, lightSalmon\n    }\n  });\n  return arr;\n}\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      squares: returnArr(),\n      currentSelectionMarked: '',\n      msg: ''\n    }\n  }\n\n  handleBtnClick = () => {\n    this.setState({\n      squares: returnArr(),\n      currentSelectionMarked: '',\n      msg: '',\n      playerWon: false\n    });\n  }\n\n  handleClick = (event) => {\n    const newVal = event.target.value.toUpperCase();\n    const boxSel = Number(event.target.id);\n    const prevVal = this.state.currentSelectionMarked;\n    let msg = '';\n    const squares = this.state.squares;\n    const allowedValues = ['X', 'O'];\n    this.setState({ msg: '' });\n    let playerWon = false;\n    //if values are not valid\n    if (!allowedValues.includes(newVal)) {\n      msg = \"Only allowed values are either 'X' or 'O'. Please mark with your appropriate symbol.\";\n      this.setState({ msg: msg });\n    }\n    else if (this.state.playerWon) {\n      msg = \"Game has finished! Please click on 'Play again' button to start the game again.\";\n      this.setState({ msg: msg });\n    }\n    //if valid values are entered\n    else {\n      if (newVal === 'X' && prevVal === 'X') {\n        msg = \"Player 'O' mark with symbol 'O'\";\n      }\n      else if (newVal === 'O' && prevVal === 'O') {\n        msg = \"Player 'X' mark with symbol 'X'\";\n      }\n      else {\n        if (squares[boxSel].marked) {\n          this.setState({ msg: 'This box has already been selected' });\n        }\n        else {\n          squares[boxSel].value = newVal;\n          squares[boxSel].marked = true;\n          squares[boxSel].color = newVal === 'X' ? 'cadetblue' : 'lightCoral';\n        }\n\n        squares.map((square, idx) => {\n          if (\n            ((idx === 0 || idx === 3 || idx === 6) && squares[idx].value !== '' && squares[idx].value === squares[idx + 1].value && squares[idx].value === squares[idx + 2].value) ||\n            ((idx === 0 || idx === 1 || idx === 2) && squares[idx].value !== '' && squares[idx].value === squares[idx + 3].value && squares[idx].value === squares[idx + 6].value) ||\n            ((idx === 0) && squares[idx].value !== '' && squares[idx].value === squares[idx + 4].value && squares[idx].value === squares[idx + 8].value) ||\n            ((idx === 2) && squares[idx].value !== '' && squares[idx].value === squares[idx + 2].value && squares[idx].value === squares[idx + 4].value)\n          ) {\n            msg = `Congratulations player '${square.value}' you have won!!`;\n            playerWon = true;\n          }\n          return square;\n        });\n      }\n      this.setState({\n        squares: squares,\n        currentSelectionMarked: newVal,\n        msg: msg,\n        playerWon: playerWon\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {(this.state.playerWon) &&\n          (<div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n            <div className=\"confetti\"></div>\n          </div>)\n        }\n        <h1 className=\"title\">Tic tac toe</h1>\n        <PlayerGrid squares={this.state.squares} handleClick={this.handleClick}\n        ></PlayerGrid>\n        <h3 style={{ color: 'firebrick', marginBottom: '3em' }}>{this.state.msg}</h3>\n        <ResetButton handleBtnClick={this.handleBtnClick}></ResetButton>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}